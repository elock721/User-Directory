{"version":3,"sources":["components/Wrapper.js","components/EmployeeTable.js","components/SearchInput.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","children","EmployeeTable","users","className","onClick","handleReverseOrder","map","user","name","first","last","location","street","number","city","state","postcode","email","SearchInput","input","onInputChange","value","setState","handleSearchValue","type","placeholder","this","onChange","e","target","Component","App","search","searchValue","reverse","fetch","then","res","json","data","results","sort","a","b","catch","err","console","log","filter","toLowerCase","includes","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6OAWeA,MATf,SAAiBC,GACb,OACI,6BACKA,EAAMC,WC6BJC,EAhCO,SAACF,GAAW,IACtBG,EAAUH,EAAVG,MACR,OACI,+BACE,+BACE,4BACE,0CACA,wBAAIC,UAAU,cAAcC,QAASL,EAAMM,oBAA3C,aACA,uCACA,oCACA,qCACA,wCACA,uCAGJ,+BACGH,EAAMI,KAAI,SAAAC,GAAI,OACf,4BACE,4BAAKA,EAAKC,KAAKC,OACf,4BAAKF,EAAKC,KAAKE,MACf,4BAAKH,EAAKI,SAASC,OAAOC,OAAS,IAAMN,EAAKI,SAASC,OAAOJ,MAC9D,4BAAKD,EAAKI,SAASG,MACnB,4BAAKP,EAAKI,SAASI,OACnB,4BAAKR,EAAKI,SAASK,UACnB,4BAAKT,EAAKU,cCETC,E,4MAvBXH,MAAQ,CACJI,MAAO,I,EAGXC,cAAgB,SAACC,GACb,EAAKC,SAAS,CAAEH,MAAQE,IAAS,WAC7B,EAAKtB,MAAMwB,kBAAkB,EAAKR,MAAMI,W,uDAItC,IAAD,OACL,OACI,6BACI,2BACIK,KAAK,OACLC,YAAY,uBACZJ,MAAOK,KAAKX,MAAMI,MAClBQ,SAAU,SAACC,GAAD,OAAM,EAAKR,cAAcQ,EAAEC,OAAOR,e,GAnBtCS,aCwCXC,G,kNAnCbhB,MAAQ,CACNb,MAAQ,GACR8B,OAAS,I,EAUXT,kBAAoB,SAACU,GACnB,EAAKX,SAAS,CAAEU,OAASC,K,EAG3B5B,mBAAqB,WACnB,EAAKiB,SAAS,CAAEpB,MAAK,YAAO,EAAKa,MAAMb,MAAMgC,c,kEAZ1B,IAAD,OAClBC,MAAM,gDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKjB,SAAS,CAAEpB,MAAQqC,EAAKC,QAAQC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAElC,KAAKE,KAAOiC,EAAEnC,KAAKE,KAAO,GAAK,UACjGkC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAcpB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAatB,kBAAmBG,KAAKH,oBACrC,kBAAC,EAAD,CACErB,MAAOwB,KAAKX,MAAMb,MAAM8C,QAAO,SAAAzC,GAAI,OAAIA,EAAKC,KAAKE,KAAKuC,cAAcC,SAAS,EAAKnC,MAAMiB,WACxF3B,mBAAoBqB,KAAKrB,0B,GA/BjByB,cCMEqB,QACW,cAA7BC,OAAOzC,SAAS0C,UAEe,UAA7BD,OAAOzC,SAAS0C,UAEhBD,OAAOzC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.4bf7ed66.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Wrapper(props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n\n\nexport default Wrapper;","import React from 'react';\n\nconst EmployeeTable = (props) => {\n    const { users } = props;\n    return (\n        <table>\n          <thead>\n            <tr>\n              <th>First Name</th>\n              <th className=\"sort-option\" onClick={props.handleReverseOrder}>Last Name</th>\n              <th>Address</th>\n              <th>City</th>\n              <th>State</th>\n              <th>Zip Code</th>\n              <th>email</th>\n            </tr>\n          </thead>\n          <tbody>\n            {users.map(user => (\n            <tr>\n              <td>{user.name.first}</td>\n              <td>{user.name.last}</td>\n              <td>{user.location.street.number + \" \" + user.location.street.name}</td>\n              <td>{user.location.city}</td>\n              <td>{user.location.state}</td>\n              <td>{user.location.postcode}</td>\n              <td>{user.email}</td>\n            </tr>))}\n          </tbody>\n        </table>\n    )\n}\n\n\nexport default EmployeeTable;","  \nimport React, { Component } from 'react';\n\nclass SearchInput extends Component {\n\n    state = {\n        input: ''\n    }\n\n    onInputChange = (value) => {\n        this.setState({ input : value }, ()=>{\n            this.props.handleSearchValue(this.state.input)\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <input \n                    type=\"text\" \n                    placeholder=\"Search for Last Name\" \n                    value={this.state.input} \n                    onChange={(e)=> this.onInputChange(e.target.value) }/>\n            </div>\n        )\n    }\n}\n\nexport default SearchInput;","import React, { Component } from 'react';\nimport Wrapper from './components/Wrapper';\nimport EmployeeTable from './components/EmployeeTable';\nimport SearchInput from './components/SearchInput';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    users : [],\n    search : ''\n  }\n\n  componentDidMount() {\n    fetch('https://randomuser.me/api/?results=20&nat=us')\n      .then(res => res.json())\n      .then(data => this.setState({ users : data.results.sort((a,b) => a.name.last > b.name.last ? 1 : -1) }))\n      .catch(err => console.log(err));\n  }\n\n  handleSearchValue = (searchValue) => {\n    this.setState({ search : searchValue });\n  }\n\n  handleReverseOrder = () => {\n    this.setState({ users : [...this.state.users.reverse()] })\n  }\n\n\n\n\n  render() {\n    return (\n      <Wrapper>\n        <SearchInput handleSearchValue={this.handleSearchValue}/> \n        <EmployeeTable \n          users={this.state.users.filter(user => user.name.last.toLowerCase().includes(this.state.search))}\n          handleReverseOrder={this.handleReverseOrder}/>\n      </Wrapper> \n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}